// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$call-name: 'call';
$call-x: 484px;
$call-y: 115px;
$call-offset-x: -484px;
$call-offset-y: -115px;
$call-width: 55px;
$call-height: 55px;
$call-total-width: 779px;
$call-total-height: 382px;
$call-image: 'sprite.png';
$call: (484px, 115px, -484px, -115px, 55px, 55px, 779px, 382px, 'sprite.png', 'call', );
$fb-name: 'fb';
$fb-x: 617px;
$fb-y: 115px;
$fb-offset-x: -617px;
$fb-offset-y: -115px;
$fb-width: 36px;
$fb-height: 36px;
$fb-total-width: 779px;
$fb-total-height: 382px;
$fb-image: 'sprite.png';
$fb: (617px, 115px, -617px, -115px, 36px, 36px, 779px, 382px, 'sprite.png', 'fb', );
$google-map-name: 'google_map';
$google-map-x: 653px;
$google-map-y: 115px;
$google-map-offset-x: -653px;
$google-map-offset-y: -115px;
$google-map-width: 36px;
$google-map-height: 35px;
$google-map-total-width: 779px;
$google-map-total-height: 382px;
$google-map-image: 'sprite.png';
$google-map: (653px, 115px, -653px, -115px, 36px, 35px, 779px, 382px, 'sprite.png', 'google_map', );
$inst-name: 'inst';
$inst-x: 689px;
$inst-y: 115px;
$inst-offset-x: -689px;
$inst-offset-y: -115px;
$inst-width: 33px;
$inst-height: 33px;
$inst-total-width: 779px;
$inst-total-height: 382px;
$inst-image: 'sprite.png';
$inst: (689px, 115px, -689px, -115px, 33px, 33px, 779px, 382px, 'sprite.png', 'inst', );
$logo-2-name: 'logo-2';
$logo-2-x: 0px;
$logo-2-y: 205px;
$logo-2-offset-x: 0px;
$logo-2-offset-y: -205px;
$logo-2-width: 306px;
$logo-2-height: 177px;
$logo-2-total-width: 779px;
$logo-2-total-height: 382px;
$logo-2-image: 'sprite.png';
$logo-2: (0px, 205px, 0px, -205px, 306px, 177px, 779px, 382px, 'sprite.png', 'logo-2', );
$logo-tablet-name: 'logo-tablet';
$logo-tablet-x: 484px;
$logo-tablet-y: 0px;
$logo-tablet-offset-x: -484px;
$logo-tablet-offset-y: 0px;
$logo-tablet-width: 295px;
$logo-tablet-height: 115px;
$logo-tablet-total-width: 779px;
$logo-tablet-total-height: 382px;
$logo-tablet-image: 'sprite.png';
$logo-tablet: (484px, 0px, -484px, 0px, 295px, 115px, 779px, 382px, 'sprite.png', 'logo-tablet', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 0px;
$logo-offset-x: 0px;
$logo-offset-y: 0px;
$logo-width: 484px;
$logo-height: 205px;
$logo-total-width: 779px;
$logo-total-height: 382px;
$logo-image: 'sprite.png';
$logo: (0px, 0px, 0px, 0px, 484px, 205px, 779px, 382px, 'sprite.png', 'logo', );
$menu-arrow-name: 'menu-arrow';
$menu-arrow-x: 722px;
$menu-arrow-y: 115px;
$menu-arrow-offset-x: -722px;
$menu-arrow-offset-y: -115px;
$menu-arrow-width: 14px;
$menu-arrow-height: 7px;
$menu-arrow-total-width: 779px;
$menu-arrow-total-height: 382px;
$menu-arrow-image: 'sprite.png';
$menu-arrow: (722px, 115px, -722px, -115px, 14px, 7px, 779px, 382px, 'sprite.png', 'menu-arrow', );
$telegram-name: 'telegram';
$telegram-x: 581px;
$telegram-y: 115px;
$telegram-offset-x: -581px;
$telegram-offset-y: -115px;
$telegram-width: 36px;
$telegram-height: 37px;
$telegram-total-width: 779px;
$telegram-total-height: 382px;
$telegram-image: 'sprite.png';
$telegram: (581px, 115px, -581px, -115px, 36px, 37px, 779px, 382px, 'sprite.png', 'telegram', );
$viber-name: 'viber';
$viber-x: 539px;
$viber-y: 115px;
$viber-offset-x: -539px;
$viber-offset-y: -115px;
$viber-width: 42px;
$viber-height: 44px;
$viber-total-width: 779px;
$viber-total-height: 382px;
$viber-image: 'sprite.png';
$viber: (539px, 115px, -539px, -115px, 42px, 44px, 779px, 382px, 'sprite.png', 'viber', );
$spritesheet-width: 779px;
$spritesheet-height: 382px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($call, $fb, $google-map, $inst, $logo-2, $logo-tablet, $logo, $menu-arrow, $telegram, $viber, );
$spritesheet: (779px, 382px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
